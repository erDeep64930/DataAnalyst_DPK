				===============================================================
					Display the Result of Python Program on the console
				===============================================================
=>To Display the Result of Python Program on the console, we have a Pre-Defined Function called "print()".
=>print() is Pre-Defined Function, which is used to display Result of Python Program on the console.
=>print() can be used in the following ways
*************************************************************************************************************************************************
Syntax-1:    print(Val)   OR print(Val1,Val2....Val-n)
		    print(Var1)  OR print(Var1,Var2....Var-n)
*************************************************************************************************************************************************
=>This Syntax is used to display either one value OR Multiple Values
Examples
-----------------
>>> a=10
>>> print(a)----------------10
>>> b=1.2
>>> print(b)--------------1.2
>>> print(a,b)-----------10 1.2
>>> sno=10
>>> sname="RS"
>>> marks=12.34
>>> print(sno,sname,marks)---------10 RS 12.34
>>> print(10,"RS",45.67)---------------10 RS 45.67
*************************************************************************************************************************************************
Syntax-2:		print(Msg1)   OR print(Msg1,Msg2,.....,Msg-n)
			print(Msg1+Msg2+,.....+Msg-n )
*************************************************************************************************************************************************
=>Here Msg1,Msg2,.....,Msg-n are called Strings
=>Here + Operator used for Concatation of str values
=>This Syntax  display Only Messages
-----------------------
Examples
-----------------------
>>> print("Hello Python")--------------------Hello Python
>>> print('Hello Python')---------------------Hello Python
>>> print('''Hello Python''')------------------Hello Python
>>> print("""Hello Python""")--------------Hello Python
>>> print("Hello","Python")----------------Hello Python
>>> print("Hello",'Python')------------------Hello Python
>>> print("Hello"+"Python")---------------HelloPython
>>> print("Hello"+" "+"Python")-----------Hello Python
>>> print("Hello"+3)---------------TypeError: can only concatenate str (not "int") to str
>>> print("Hello"+str(3))---------------------Hello3
>>> print("Python"+3.12)----------------TypeError: can only concatenate str (not "float") to str
>>> print("Python"+str(3.12))--------------Python3.12
>>> print(10+12)----------------------------22
>>> print("10"+"12")---------------------1012
>>> print(str(10)+str(12))--------------1012
*************************************************************************************************************************************************
Syntax-3: print(Message Cum Value)  OR print(Vlalue Cum Message)
*************************************************************************************************************************************************
=>This Syntax displays Values Cum Messages OR  Messages cum Values
------------------------
Examples
------------------------
>>> a=100
>>> print("Val of a="+str(a))----------Val of a=100
>>> print("Val of a=",a)----------------Val of a= 100
>>> print("Val of a="+a)----------------TypeError: can only concatenate str (not "int") to str
-----------------
>>> a=100
>>> b=200
>>> c=a+b
>>> print("Sum=",c)-----------Sum= 300
>>> print("Sum="+str(c))----Sum=300
>>> print(c," is the sum")--------300  is the sum
>>> print(str(c)+" is the sum")---300 is the sum
------------------------------
>>> a=100
>>> b=200
>>> c=a+b
>>> print("Sum of ",a," and ",b,"=",c)------Sum of  100  and  200 = 300
>>> print("Sum of "+str(a)+" and "+str(b)+"="+str(c))---Sum of 100 and 200=300
---------------------------
>>> a=10
>>> b=20
>>> c=30
>>> d=a+b+c
>>> print("Sum of ",a,",",b," and ",c,"=",d)---------Sum of  10 , 20  and  30 = 60
>>> print("Sum of "+str(a)+","+str(b)+" and "+str(c)+"="+str(d))---Sum of 10,20 and 30=60
-------------------------
>>> a=10
>>> b=20
>>> c=30
>>> d=a+b+c
>>> print("sum(",a,",",b,",",c,")=",d)------sum( 10 , 20 , 30 )= 60
*************************************************************************************************************************************************
Syntax-4  print(Message Cum Value with format())  OR print(Vlalue Cum Message with format() )
*************************************************************************************************************************************************
=>This Syntax displays Values Cum Messages OR  Messages cum Values with format().
-------------------------------
Examples
------------------------------
>>> a=100
>>> b=200
>>> c=a+b
>>> print("sum={}".format(c))------------sum=300
>>> print("{} is the sum".format(c))------300 is the sum
>>> print("Sum of {} and {}={}".format(a,b,c))----Sum of 100 and 200=300
>>> print("sum({},{})={}".format(a,b,c))------------sum(100,200)=300
>>> print("{}+{}={}".format(a,b,c))-----------------100+200=300
>>> a=4
>>> b=3
>>> print("add({},{})={}  sub({},{})={}".format(a,b,a+b,a,b,a-b))---add(4,3)=7  sub(4,3)=1
------------------
>>> lst=[10,"RS",34.56,True]
>>> print("Content of list={}".format(lst))-----Content of list=[10, 'RS', 34.56, True]
>>> print("Content of list=",lst)------------------Content of list= [10, 'RS', 34.56, True]
>>> print("Content of list="+lst)---------------TypeError: can only concatenate str (not "list") to str
>>> print("Content of list="+str(lst))----------Content of list=[10, 'RS', 34.56, True]

*************************************************************************************************************************************************
Syntax-5:   print(Message Cum Value with format Specifiers)
*************************************************************************************************************************************************
=>The  format Specifiers in Python are
		%d used for Representing Int Data
		%f used for Representing float data
		%s used for Representing str data
=>If we don't have any format specifier then we must convert it into str by using str() and use %s
-------------------------------------
Examples
-------------------------------------
>>>a=100
>>> print("Val of a=%d" %a)-------------Val of a=100
>>> a=1.3
>>> print("Val of a=%f" %a)-----------Val of a=1.300000
>>> print("Val of a=%0.2f" %a)--------Val of a=1.30
>>> print("Val of a=%0.20f" %a)--------Val of a=1.30000000000000004441
>>> sno=10
>>> sname="RS"
>>> marks=34.56
>>> print("My Number is %d and Name is %s and Marks is %f" %(sno,sname,marks))
						My Number is 10 and Name is RS and Marks is 34.560000
>>> print("My Number is %d and Name is '%s' and Marks is %f" %(sno,sname,marks))
					My Number is 10 and Name is 'RS' and Marks is 34.560000

------------
>>> a=10
>>> b=20
>>> c=a+b
>>> print("sum(%d,%d)=%d" %(a,b,c))--------sum(10,20)=30
>>> print("sum(%f,%f)=%f" %(a,b,c))---------sum(10.000000,20.000000)=30.000000
>>> print("sum(%0.2f,%0.2f)=%0.2f" %(a,b,c))------sum(10.00,20.00)=30.00
>>> lst=[10,"RS",45.67,True]
>>> print("Content of lst=%d" %lst)--------TypeError: %d format: a real number is required, not list
>>> print("Content of lst=%s" %str(lst))------Content of lst=[10, 'RS', 45.67, True]
*************************************************************************************************************************************************
Syntax-6:  print(val,end=" ")
*************************************************************************************************************************************************
>>> r=range(10,20,2)
>>> for val in r:
...		print(val)
...
			10
			12
			14
			16
			18
>>> for val in r:
...		print(val,end=" ")
...
		10 12 14 16 18 
>>>
>>> for val in r:
...     print(val,end="->")
...
			10->12->14->16->18->
================================================x=================================================