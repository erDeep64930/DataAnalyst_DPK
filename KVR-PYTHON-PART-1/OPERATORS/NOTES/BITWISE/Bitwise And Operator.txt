			=====================================================
						4. Bitwise And Operator ( & )
			=====================================================
=>Syntax:      Var1 & Var2
=>The Functionality of Bitwise AND Operator ( & ) is Show Bellow
			=====================================================
					Var1			Var2			Var1 & Var2
			=====================================================
					0			1				0				
					1			0				0	
					0			0				0
					1			1				1
			=====================================================
-------------------------------
Examples1
-------------------------------
>>> 0&1----------------0
>>> 1&0----------------0
>>> 0&0----------------0
>>> 1&1----------------1
--------------------------------------
Examples2
--------------------------------------
>>>a=4---------------------0100
>>>b=3---------------------0011
				-----------------
>>>c=a&b-----------------0000---------Result is 0
>>>print(c)-----------0
>>> print(10&15)---------10
>>> print(15&10)---------10
>>> print(30&20)---------20
>>> print(20&30)---------20
-----------
>>> 30 and 20----------20
>>> 20 and 30----------30
--------------------------------------------
Most Imp
--------------------------------------------
>>> s1={10,20,30}
>>> s2={15,20,35}
>>> s3=s1&s2 # Bitwise AND Operator (&)
>>> print(s3,type(s3))-------------{20} <class 'set'>
--------------
>>> s1={"Apple","Mango"}
>>> s2={"Mango","Kiwi"}
>>> s3=s1&s2 # # Bitwise AND Operator (&)
>>> print(s3,type(s3))-----------------{'Mango'} <class 'set'>
-------------------
>>> s1={1.2,3.4}
>>> s2={4.5,6.7}
>>> s3=s1&s2
>>> print(s3,type(s3))-------------set() <class 'set'>
------------------------
>>> "Apple"&"Mango"------------TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> "apple" and "mango"----------'mango'
>>> 1.2&3.4------------------TypeError: unsupported operand type(s) for &: 'float' and 'float'
>>> 1.2 and 3.4--------------3.4
============================================x==================================================

